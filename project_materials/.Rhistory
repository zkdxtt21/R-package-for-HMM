# using kmeans method to get the initial value
ini_dhmm <- dhmm.model(lambda, 'eq_full')
kmeans_iter = 100
mu_ini <- matrix(rep(NA, kmeans_iter * lambda), nrow = kmeans_iter)
sd_ini <- matrix(rep(NA, kmeans_iter * lambda), nrow = kmeans_iter)
for(m in 1:kmeans_iter){
km <- kmeans(obser, lambda, iter.max = 10)
mu_ini[m,] <- c(sort(km$centers))
ord <- order(km$centers)
sd_ini[m,] <- sqrt(km$withinss[ord]/(km$size[ord]-1))
}
ini_dhmm[[3]] <- apply(mu_ini, 2, mean)
ini_dhmm[[4]] <- apply(sd_ini, 2, mean)
# em to estimate model
dhmm_model <- dhmm.estimate(ini_dhmm, obser, max_iter)
# viterbi algorithm to find best path
best_gauss <- dhmm.viterbi(dhmm_model, obser)
# compute BIC...
bic[i] = best_gauss[[3]] + log(time_stp) * lambda
print(bic[i])
# save data to list
model_list[[i]] <- dhmm_model
best_list <- cbind(best_list, best_gauss[[2]])
}
# best_model <- model_list[[which(BIC == min(BIC))]]
# best_state <- best_list[, which(BIC == min(BIC))]
# best <- list(best_model, best_state)
# ------------ temp, test code ----------------
bestv <- list(dhmm_model, best_gauss[[2]])
return (bestv)
}
result <- dhmm.decoding(obser, range, max_iter)
ln(e)
ln(exp(1))
dhmm.decoding <- function(obser, range = 5, max_iter) {
# range can only take one or two dim vector
bic <- NULL
model_list <- NULL
best_list <- NULL
for (i in 1:length(range)) {
lambda <- range[i]
# using kmeans method to get the initial value
ini_dhmm <- dhmm.model(lambda, 'eq_full')
kmeans_iter = 100
mu_ini <- matrix(rep(NA, kmeans_iter * lambda), nrow = kmeans_iter)
sd_ini <- matrix(rep(NA, kmeans_iter * lambda), nrow = kmeans_iter)
for(m in 1:kmeans_iter){
km <- kmeans(obser, lambda, iter.max = 10)
mu_ini[m,] <- c(sort(km$centers))
ord <- order(km$centers)
sd_ini[m,] <- sqrt(km$withinss[ord]/(km$size[ord]-1))
}
ini_dhmm[[3]] <- apply(mu_ini, 2, mean)
ini_dhmm[[4]] <- apply(sd_ini, 2, mean)
# em to estimate model
dhmm_model <- dhmm.estimate(ini_dhmm, obser, max_iter)
# viterbi algorithm to find best path
best_gauss <- dhmm.viterbi(dhmm_model, obser)
# compute BIC...
bic[i] = best_gauss[[3]] + log(time_stp, base = exp(1)) * lambda
print(bic[i])
# save data to list
model_list[[i]] <- dhmm_model
best_list <- cbind(best_list, best_gauss[[2]])
}
# best_model <- model_list[[which(BIC == min(BIC))]]
# best_state <- best_list[, which(BIC == min(BIC))]
# best <- list(best_model, best_state)
# ------------ temp, test code ----------------
bestv <- list(dhmm_model, best_gauss[[2]])
return (bestv)
}
dhmm.viterbi <- function(model, obser) {
# get states, transp, mu, var
states <- model[[1]]
transp <- model[[2]]
mu <- model[[3]]
sd <- model[[4]]
time_stp <- length(obser)
state_num <- length(states)
# create a prob mtx and best_path matrix
prob_mtx <- matrix(rep(NA, state_num * time_stp), nrow = state_num)
best_path <- prob_mtx
scaling <- rep(NA, time_stp)
prob_mtx[, 1] <- colSums(transp)/sum(colSums(transp)) *
dnorm(rep(obser[1], state_num), mean=mu, sd=sd)
scaling[1] = sum(prob_mtx[, 1])
prob_mtx[, 1] = prob_mtx[, 1]/scaling[1]
best_path[, 1] <- 0
for (i in 2:time_stp) {
for (j in 1:state_num) {
tmp <- prob_mtx[, i-1] * transp[, j] *
dnorm(obser[i], mean=mu[j], sd=sd[j])
prob_mtx[j, i] <- max(tmp)
best_path[j, i] <- which.max(tmp)
}
scaling[i] = sum(prob_mtx[, i])
prob_mtx[, i] = prob_mtx[, i]/scaling[i]
}
best <- rep(NA, time_stp)
best[time_stp] <- which.max(prob_mtx[, time_stp])
for (i in time_stp:2) {
best[i-1] <- best_path[best[i], i]
}
# compute the log-likelihood
scale_total = 1
for(i in 1:state_num) {
scale_total = scale_total * scaling[i]
}
print(scale_total * max(prob_mtx[, time_stp]))
llk <- log(scale_total, base = exp(1)) + log(max(prob_mtx[, time_stp]), base = exp(1))
print(llk)
res <- list(prob_mtx, best, llk)
return (res)
}
dhmm.decoding <- function(obser, range = 5, max_iter) {
# range can only take one or two dim vector
bic <- NULL
model_list <- NULL
best_list <- NULL
for (i in 1:length(range)) {
lambda <- range[i]
# using kmeans method to get the initial value
ini_dhmm <- dhmm.model(lambda, 'eq_full')
kmeans_iter = 100
mu_ini <- matrix(rep(NA, kmeans_iter * lambda), nrow = kmeans_iter)
sd_ini <- matrix(rep(NA, kmeans_iter * lambda), nrow = kmeans_iter)
for(m in 1:kmeans_iter){
km <- kmeans(obser, lambda, iter.max = 10)
mu_ini[m,] <- c(sort(km$centers))
ord <- order(km$centers)
sd_ini[m,] <- sqrt(km$withinss[ord]/(km$size[ord]-1))
}
ini_dhmm[[3]] <- apply(mu_ini, 2, mean)
ini_dhmm[[4]] <- apply(sd_ini, 2, mean)
# em to estimate model
dhmm_model <- dhmm.estimate(ini_dhmm, obser, max_iter)
# viterbi algorithm to find best path
best_gauss <- dhmm.viterbi(dhmm_model, obser)
# compute BIC...
bic[i] = -2*best_gauss[[3]] + log(time_stp, base = exp(1)) * lambda
print(bic[i])
# save data to list
model_list[[i]] <- dhmm_model
best_list <- cbind(best_list, best_gauss[[2]])
}
# best_model <- model_list[[which(BIC == min(BIC))]]
# best_state <- best_list[, which(BIC == min(BIC))]
# best <- list(best_model, best_state)
# ------------ temp, test code ----------------
bestv <- list(dhmm_model, best_gauss[[2]])
return (bestv)
}
result <- dhmm.decoding(obser, range, max_iter)
size <- 600
model <- dhmm.model(4, 'count')
#ini_dhmm = dhmm.model(3, 'count')
#ini_dhmm[[3]] = c( 5,0.5, 5)
model[[3]] = c(0,15,5,10)
model[[2]] <- matrix(c(0.3,0.2,0.3,0.2,0.2,0.2,0.5,0.1,0.3,0.3,0.1,0.3,0.2,0.2,0.3,0.3),4,4, byrow = T)
sim_samples <- dhmm.sim(model, size)
obs = sim_samples[[2]]
obser = obs
range <- c(2,3,4)
max_iter <- 100
result <- dhmm.decoding(obser, range, max_iter)
plot(obs, pch=sim_samples[[1]], col=result[[2]])
size <- 600
model <- dhmm.model(4, 'count')
#ini_dhmm = dhmm.model(3, 'count')
#ini_dhmm[[3]] = c( 5,0.5, 5)
model[[3]] = c(0,20,30,10)
model[[2]] <- matrix(c(0.3,0.2,0.3,0.2,0.2,0.2,0.5,0.1,0.3,0.3,0.1,0.3,0.2,0.2,0.3,0.3),4,4, byrow = T)
sim_samples <- dhmm.sim(model, size)
obs = sim_samples[[2]]
obser = obs
range <- c(2,3,4)
max_iter <- 100
result <- dhmm.decoding(obser, range, max_iter)
plot(obs, pch=sim_samples[[1]], col=result[[2]])
size <- 1000
model <- dhmm.model(4, 'count')
#ini_dhmm = dhmm.model(3, 'count')
#ini_dhmm[[3]] = c( 5,0.5, 5)
model[[3]] = c(0,20,30,10)
model[[2]] <- matrix(c(0.3,0.2,0.3,0.2,0.2,0.2,0.5,0.1,0.3,0.3,0.1,0.3,0.2,0.2,0.3,0.3),4,4, byrow = T)
sim_samples <- dhmm.sim(model, size)
obs = sim_samples[[2]]
obser = obs
range <- c(2,3,4)
max_iter <- 100
result <- dhmm.decoding(obser, range, max_iter)
plot(obs, pch=sim_samples[[1]], col=result[[2]])
size <- 1000
model <- dhmm.model(4, 'count')
#ini_dhmm = dhmm.model(3, 'count')
#ini_dhmm[[3]] = c( 5,0.5, 5)
model[[3]] = c(0,3,5,7)
model[[2]] <- matrix(c(0.3,0.2,0.3,0.2,0.2,0.2,0.5,0.1,0.3,0.3,0.1,0.3,0.2,0.2,0.3,0.3),4,4, byrow = T)
sim_samples <- dhmm.sim(model, size)
obs = sim_samples[[2]]
obser = obs
range <- c(2,3,4)
max_iter <- 100
result <- dhmm.decoding(obser, range, max_iter)
plot(obs, pch=sim_samples[[1]], col=result[[2]])
size <- 100
model <- dhmm.model(4, 'count')
#ini_dhmm = dhmm.model(3, 'count')
#ini_dhmm[[3]] = c( 5,0.5, 5)
model[[3]] = c(0,3,5,7)
model[[2]] <- matrix(c(0.3,0.2,0.3,0.2,0.2,0.2,0.5,0.1,0.3,0.3,0.1,0.3,0.2,0.2,0.3,0.3),4,4, byrow = T)
sim_samples <- dhmm.sim(model, size)
obs = sim_samples[[2]]
obser = obs
range <- c(2,3,4)
max_iter <- 100
result <- dhmm.decoding(obser, range, max_iter)
plot(obs, pch=sim_samples[[1]], col=result[[2]])
log(100)
dhmm.viterbi <- function(model, obser) {
# get states, transp, mu, var
states <- model[[1]]
transp <- model[[2]]
mu <- model[[3]]
sd <- model[[4]]
time_stp <- length(obser)
state_num <- length(states)
# create a prob mtx and best_path matrix
prob_mtx <- matrix(rep(NA, state_num * time_stp), nrow = state_num)
best_path <- prob_mtx
scaling <- rep(NA, time_stp)
prob_mtx[, 1] <- colSums(transp)/sum(colSums(transp)) *
dnorm(rep(obser[1], state_num), mean=mu, sd=sd)
scaling[1] = sum(prob_mtx[, 1])
prob_mtx[, 1] = prob_mtx[, 1]/scaling[1]
best_path[, 1] <- 0
for (i in 2:time_stp) {
for (j in 1:state_num) {
tmp <- prob_mtx[, i-1] * transp[, j] *
dnorm(obser[i], mean=mu[j], sd=sd[j])
prob_mtx[j, i] <- max(tmp)
best_path[j, i] <- which.max(tmp)
}
scaling[i] = sum(prob_mtx[, i])
prob_mtx[, i] = prob_mtx[, i]/scaling[i]
}
best <- rep(NA, time_stp)
best[time_stp] <- which.max(prob_mtx[, time_stp])
for (i in time_stp:2) {
best[i-1] <- best_path[best[i], i]
}
# compute the log-likelihood  w
log_scale_total = 1
for(i in 1:state_num) {
log_scale_total = scale_total + log(scaling[i])
}
llk <- log_scale_total + log(max(prob_mtx[, time_stp]), base = exp(1))
print(llk)
res <- list(prob_mtx, best, llk)
return (res)
}
dhmm.decoding <- function(obser, range = 5, max_iter) {
# range can only take one or two dim vector
bic <- NULL
model_list <- NULL
best_list <- NULL
for (i in 1:length(range)) {
lambda <- range[i]
# using kmeans method to get the initial value
ini_dhmm <- dhmm.model(lambda, 'eq_full')
kmeans_iter = 100
mu_ini <- matrix(rep(NA, kmeans_iter * lambda), nrow = kmeans_iter)
sd_ini <- matrix(rep(NA, kmeans_iter * lambda), nrow = kmeans_iter)
for(m in 1:kmeans_iter){
km <- kmeans(obser, lambda, iter.max = 10)
mu_ini[m,] <- c(sort(km$centers))
ord <- order(km$centers)
sd_ini[m,] <- sqrt(km$withinss[ord]/(km$size[ord]-1))
}
ini_dhmm[[3]] <- apply(mu_ini, 2, mean)
ini_dhmm[[4]] <- apply(sd_ini, 2, mean)
# em to estimate model
dhmm_model <- dhmm.estimate(ini_dhmm, obser, max_iter)
# viterbi algorithm to find best path
best_gauss <- dhmm.viterbi(dhmm_model, obser)
# compute BIC...
bic[i] = -2*best_gauss[[3]] + log(time_stp) * lambda
print(bic[i])
# save data to list
model_list[[i]] <- dhmm_model
best_list <- cbind(best_list, best_gauss[[2]])
}
# best_model <- model_list[[which(BIC == min(BIC))]]
# best_state <- best_list[, which(BIC == min(BIC))]
# best <- list(best_model, best_state)
# ------------ temp, test code ----------------
bestv <- list(dhmm_model, best_gauss[[2]])
return (bestv)
}
dhmm.viterbi <- function(model, obser) {
# get states, transp, mu, var
states <- model[[1]]
transp <- model[[2]]
mu <- model[[3]]
sd <- model[[4]]
time_stp <- length(obser)
state_num <- length(states)
# create a prob mtx and best_path matrix
prob_mtx <- matrix(rep(NA, state_num * time_stp), nrow = state_num)
best_path <- prob_mtx
scaling <- rep(NA, time_stp)
prob_mtx[, 1] <- colSums(transp)/sum(colSums(transp)) *
dnorm(rep(obser[1], state_num), mean=mu, sd=sd)
scaling[1] = sum(prob_mtx[, 1])
prob_mtx[, 1] = prob_mtx[, 1]/scaling[1]
best_path[, 1] <- 0
for (i in 2:time_stp) {
for (j in 1:state_num) {
tmp <- prob_mtx[, i-1] * transp[, j] *
dnorm(obser[i], mean=mu[j], sd=sd[j])
prob_mtx[j, i] <- max(tmp)
best_path[j, i] <- which.max(tmp)
}
scaling[i] = sum(prob_mtx[, i])
prob_mtx[, i] = prob_mtx[, i]/scaling[i]
}
best <- rep(NA, time_stp)
best[time_stp] <- which.max(prob_mtx[, time_stp])
for (i in time_stp:2) {
best[i-1] <- best_path[best[i], i]
}
# compute the log-likelihood  w
log_scale_total = 1
for(i in 1:state_num) {
log_scale_total = scale_total + log(scaling[i])
}
llk <- log_scale_total + log(max(prob_mtx[, time_stp]), base = exp(1))
print(llk)
res <- list(prob_mtx, best, llk)
return (res)
}
size <- 600
model <- dhmm.model(4, 'count')
#ini_dhmm = dhmm.model(3, 'count')
#ini_dhmm[[3]] = c( 5,0.5, 5)
model[[3]] = c(0,3,5,7)
model[[2]] <- matrix(c(0.3,0.2,0.3,0.2,0.2,0.2,0.5,0.1,0.3,0.3,0.1,0.3,0.2,0.2,0.3,0.3),4,4, byrow = T)
sim_samples <- dhmm.sim(model, size)
obs = sim_samples[[2]]
obser = obs
range <- c(2,3,4)
max_iter <- 100
result <- dhmm.decoding(obser, range, max_iter)
plot(obs, pch=sim_samples[[1]], col=result[[2]])
dhmm.viterbi <- function(model, obser) {
# get states, transp, mu, var
states <- model[[1]]
transp <- model[[2]]
mu <- model[[3]]
sd <- model[[4]]
time_stp <- length(obser)
state_num <- length(states)
# create a prob mtx and best_path matrix
prob_mtx <- matrix(rep(NA, state_num * time_stp), nrow = state_num)
best_path <- prob_mtx
scaling <- rep(NA, time_stp)
prob_mtx[, 1] <- colSums(transp)/sum(colSums(transp)) *
dnorm(rep(obser[1], state_num), mean=mu, sd=sd)
scaling[1] = sum(prob_mtx[, 1])
prob_mtx[, 1] = prob_mtx[, 1]/scaling[1]
best_path[, 1] <- 0
for (i in 2:time_stp) {
for (j in 1:state_num) {
tmp <- prob_mtx[, i-1] * transp[, j] *
dnorm(obser[i], mean=mu[j], sd=sd[j])
prob_mtx[j, i] <- max(tmp)
best_path[j, i] <- which.max(tmp)
}
scaling[i] = sum(prob_mtx[, i])
prob_mtx[, i] = prob_mtx[, i]/scaling[i]
}
best <- rep(NA, time_stp)
best[time_stp] <- which.max(prob_mtx[, time_stp])
for (i in time_stp:2) {
best[i-1] <- best_path[best[i], i]
}
# compute the log-likelihood  w
log_scale_total = 1
for(i in 1:state_num) {
log_scale_total = log_scale_total + log(scaling[i])
}
llk <- log_scale_total + log(max(prob_mtx[, time_stp]), base = exp(1))
print(llk)
res <- list(prob_mtx, best, llk)
return (res)
}
result <- dhmm.decoding(obser, range, max_iter)
plot(obs, pch=sim_samples[[1]], col=result[[2]])
result <- dhmm.decoding(obser, range, max_iter)
dhmm.viterbi <- function(model, obser) {
# get states, transp, mu, var
states <- model[[1]]
transp <- model[[2]]
mu <- model[[3]]
sd <- model[[4]]
time_stp <- length(obser)
state_num <- length(states)
# create a prob mtx and best_path matrix
prob_mtx <- matrix(rep(NA, state_num * time_stp), nrow = state_num)
best_path <- prob_mtx
scaling <- rep(NA, time_stp)
prob_mtx[, 1] <- colSums(transp)/sum(colSums(transp)) *
dnorm(rep(obser[1], state_num), mean=mu, sd=sd)
scaling[1] = sum(prob_mtx[, 1])
prob_mtx[, 1] = prob_mtx[, 1]/scaling[1]
best_path[, 1] <- 0
for (i in 2:time_stp) {
for (j in 1:state_num) {
tmp <- prob_mtx[, i-1] * transp[, j] *
dnorm(obser[i], mean=mu[j], sd=sd[j])
prob_mtx[j, i] <- max(tmp)
best_path[j, i] <- which.max(tmp)
}
scaling[i] = sum(prob_mtx[, i])
prob_mtx[, i] = prob_mtx[, i]/scaling[i]
}
best <- rep(NA, time_stp)
best[time_stp] <- which.max(prob_mtx[, time_stp])
for (i in time_stp:2) {
best[i-1] <- best_path[best[i], i]
}
# compute the log-likelihood  w
#  log_scale_total = 1
#  for(i in 1:state_num) {
#    log_scale_total = log_scale_total + log(scaling[i])
#  }
#  llk <- log_scale_total + log(max(prob_mtx[, time_stp]), base = exp(1))
#  print(llk)
res <- list(prob_mtx, best)
return (res)
}
dhmm.decoding <- function(obser, range = 5, max_iter) {
# range can only take one or two dim vector
bic <- NULL
model_list <- NULL
best_list <- NULL
for (i in 1:length(range)) {
lambda <- range[i]
# using kmeans method to get the initial value
ini_dhmm <- dhmm.model(lambda, 'eq_full')
kmeans_iter = 100
mu_ini <- matrix(rep(NA, kmeans_iter * lambda), nrow = kmeans_iter)
sd_ini <- matrix(rep(NA, kmeans_iter * lambda), nrow = kmeans_iter)
for(m in 1:kmeans_iter){
km <- kmeans(obser, lambda, iter.max = 10)
mu_ini[m,] <- c(sort(km$centers))
ord <- order(km$centers)
sd_ini[m,] <- sqrt(km$withinss[ord]/(km$size[ord]-1))
}
ini_dhmm[[3]] <- apply(mu_ini, 2, mean)
ini_dhmm[[4]] <- apply(sd_ini, 2, mean)
# em to estimate model
dhmm_model <- dhmm.estimate(ini_dhmm, obser, max_iter)
# viterbi algorithm to find best path
best_gauss <- dhmm.viterbi(dhmm_model, obser)
# compute BIC...
#    bic[i] = -2*best_gauss[[3]] + log(time_stp) * lambda
#    print(bic[i])
# save data to list
model_list[[i]] <- dhmm_model
best_list <- cbind(best_list, best_gauss[[2]])
}
# best_model <- model_list[[which(BIC == min(BIC))]]
# best_state <- best_list[, which(BIC == min(BIC))]
# best <- list(best_model, best_state)
# ------------ temp, test code ----------------
bestv <- list(dhmm_model, best_gauss[[2]])
return (bestv)
}
result <- dhmm.decoding(obser, max_iter)
result <- dhmm.decoding(obser,2, max_iter)
result
plot(obs, pch=sim_samples[[1]], col=result[[2]])
result <- dhmm.decoding(obser,3, max_iter)
plot(obs, pch=sim_samples[[1]], col=result[[2]])
result
result <- dhmm.decoding(obser,4, max_iter)
plot(obs, pch=sim_samples[[1]], col=result[[2]])
result
kmeans(obser, 2)
km = kmeans(obser, 2)
km$withinss
sum(km$withinss)/km$totss
1-sum(km$withinss)/km$totss
km = kmeans(obser, 2)
1-sum(km$withinss)/km$totss
km = kmeans(obser, c(2,3,4))
1-sum(km$withinss)/km$totss
km
km = kmeans(obser, 3)
1-sum(km$withinss)/km$totss
km = kmeans(obser, 2)
1-sum(km$withinss)/km$totss
km = kmeans(obser, 4)
1-sum(km$withinss)/km$totss
plot(obs, pch=sim_samples[[1]], col=km$cluster)
km$totss
sum(km$withinss)
km = kmeans(obser, 3)
1-sum(km$withinss)/km$totss
sum(km$withinss)
